<?php

/**
 * Class Leetify
 */
class Leetify extends LeetifyAbstract
{
    private $dict = array(
        'a' => array('/-\ ', 'Д', '/-\\', '@', '/*\\', '/=\\', '/\\', '^', 'aye', 'λ', 'ci', 'Z', '(L', '∂', '4'),
        'b' => array('|3', 'I3', '!3', 'ß', '(3', '/3', ')3', '|-]', ']3', 'j3', '6', '13', '8'),
        'c' => array('©', '[', '(', '<', '¢', '{', '©©', 'sea', 'see', '5'),
        'd' => array(' ?', ')', '|)', '[)', '(|', '∂', '])', '|}', '|]', 'I>', '|>', '?', 'T)', 'I7', '0', 'ð', 'cl', '2'),
        'e' => array('[-', '£', '&', '€', 'ə', 'ë', '|=-', '3'),
        'f' => array(')', '|=', 'ʃ’', '|#', ']=', '/=', '}', 'ph', '(=', 'ƒ', 'v', '7'),
        'g' => array('6', '9', '[,', '&', '(_+', 'C-', 'gee', 'jee', 'cj', '(?,', '{,', '<-', '(.'),
        'h' => array('\-/', '/-/', '#', ']-[', '[-]', ')-(', '(-)', '|~|', '|-|', ']~[', '!-!', '1-1', ':-:', '}{', '}-{', 'I+I', '{-}', '\\=\\', '|.|', '|=|', '|*|', 'aych', '6'),
        'i' => array('|', '][', '!', '3y3', '!', '|', 'eye', '3y3', 'ai', '¡', '1'),
        'j' => array(',_|', '_|', '._|', '._]', '_]', ',_]', ']', '_|', '_/', ',_|', '_]', ',_]', '._|', '._]', ']', '¿', '</', '_)', 'ʝ', '01'),
        'k' => array('>|', '|<', '1<', '|c', '|(',),
        'l' => array('2', '£', '7', '|_', '|', '|_', 'ВЈ', '|', '|_', 'lJ', '£', '¬', '1', '7', '07'),
        'm' => array('/\/\\', '/V\\', '[V]', '|\/|', '^^', '<\/>', '{V}', '(v)', '(V)', '|\|\\', ']\/[', 'nn', '/\\/\\', '|\\/|', 'em', '|v|', 'IYI', 'IVI', '[V]', '^^', 'nn', '//\\\\//\\\\', '(V)', '(v)', '{V}', '(\\/)', '|\\|\\', '/|\\', '/|/|', '<\\/>', '.\\\\', '/^^\\', '/V\\', '|^^|', 'AA', 44, '02'),
        'n' => array('^/', '|\|', '/\/', '[\]', '<\>', '{\}', '/V', 'И', '^', 'ท', '|\\|', '^/', '/\\/', '//\\\\//', '₪', '[\]', '<\\>', '{\\}', '/V', '//', 'ท', 'И', '[]\\[]', ']\\[', '~', '03'),
        'o' => array('0', '()', 'oh', '[]', 'p', '<>', 'Ø',),
        'p' => array('|*', '|o', '|º', '?', '|^', '|>', '|"', '9', '[]D', '|°', '|7', '|*', '|o', '|º', '|>', '|"', '|^', '?', '9', '[]D', '|7', 'q', '¶', '℗', 'þ', '|D', '66'),
        'q' => array('(_,)', '()_', '2', '0_', '<|', '&', '0_', '0,', '(,)', '<|', 'cue', '&', '9', '2', '99'),
        'r' => array('I2', '|9', '|`', '|~', '|?', '/2', '|^', 'lz', '7', '2', '12', '®', '[z', 'Я', '.-', '|2', '|-', '|2', '|9', '|?', '/2', 'I2', '|^', '|~', '|-', 'lz', 'В', 'I2', '[z', '|`', 'l2', 'ʁ', '.-', 'Я', '®', '2', '44'),
        's' => array('$', 'z', '§', 'ehs', 'es', '5', '2', '55'),
        't' => array('7', '+', '-|-', '\'][\'', '†', '«|»', '~|~', '+', '-|-', '\'][\'', '†', '~|~', '«|»', '7', '1', '77'),
        'u' => array('(_)', '|_|', 'v', 'L|', 'µ', 'บ', '|_|', '(_)', 'Y3W', 'M', '[_]', '\_/', '\_\\', '/_/', 'L|', 'v', 'µ', 'บ', '88'),
        'v' => array('\/', '|/', '\|', '\\/', '√', '\\\\//', '007'),
        'w' => array('\\/\\/', 'vv', '\'//', '\\\\\'', '\\^/', '(n)', '\\X/', '\\|/', '\\_|_/', '\\\\//\\\\//', '\\_:_/', ']I[', 'UU', 'dubya', '\\V/', '\\X/', 'UU', '2u', 'Ш', 'ɰ', '￦', 'JL', '008'),
        'x' => array('Ж', '×', '?', '}{', ')(', '][', '><', '%', 'Р–', '}{', 'ecks', 'Г—', '*', ')(', '][', 'ex', '001'),
        'y' => array('j', '`/', 'Ч', '7', '\|/', '¥', '\//', '`/', 'j', '`(', '-/', '\'/', '\\//', 'φ', 'λ', 'Ч', '¥', 'Ψ', '7', '002'),
        'z' => array('2', '7_', '-/_', ' %', '>_', 's', '~/_', '-\_', '-|_', '≥', '-/_', '~/_', '-\\_', '-|_', '>_', 's', '%', '7_', 'ʒ', 2, '003'),
    );

    /**
     * @return array
     */
    public function getDictionary() {
        return $this->dict;
    }


    /**
     * @param bool|false $isEncode
     * @return string
     */
    protected function run($isEncode = false) {
        $out = '';
        if ($this->string) {
            $this->isEncode = $isEncode;
            $out = $this->main();
        }
        return $out;
    }

    /**
     * Internal main method
     * @return string
     */
    protected function main() {
        $out = '';
        $dict = $this->getDictionary();
        $chars = Utils::str_split_($this->string);
        if ($this->isEncode) {
            foreach($chars as $char) {
                if (isset($dict[$char])) {
                    $randomIndex = rand(0, count($dict[$char]));
                    $c = $dict[$char][$randomIndex];
                } else {
                    var_dump(__LINE__);
                    $c = $char;
                }
                $out .= $c;
            }
        } else {
            $t = array();
            $tt = '';
            foreach($chars as $char) {
                foreach ($dict as $charDict => $rowDict) {
                    if (in_array($char, $rowDict, true)) {
                        $t[] = $charDict;
                        $tt = $charDict;
                    }
                }
                if ($tt) {
                    $out .= $tt;
                } else {
                    $out .= $char;
                }
            }
        }
        return $out;
    }
}
